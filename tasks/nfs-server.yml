---
- name: Nfs-server | configure nfs service
  freeipa.ansible_freeipa.ipaservice:
    ipaadmin_password: "{{ company_realm_password }}"
    name: nfs/{{ hostname | default(volume_machine_hostname.stdout) }}
    force: True
  no_log: "{{ secure_logs }}"
  delegate_to: "{{ groups[idm_group][0] }}"

- name: Nfs-server | allows nfs server to get keytab
  freeipa.ansible_freeipa.ipaservice:
    ipaadmin_password: "{{ company_realm_password }}"
    name: nfs/{{ hostname | default(volume_machine_hostname.stdout) }}
    action: member
  no_log: "{{ secure_logs }}"
  delegate_to: "{{ groups[idm_group][0] }}"

- name: Nfs-server | check if exists {{ keytab.value.keytab }}
  ansible.builtin.stat:
    path: '{{ keytab_path }}'
  register: keytab_stat

- name: Nfs-server | check kvno of keytab
  ansible.builtin.command: kinit -k -t {{ keytab_path }} nfs/{{ hostname | default(volume_machine_hostname.stdout) }}
  register: validate_keytab
  changed_when: false
  failed_when: false
  when: keytab_stat.stat.exists
  become: True

- name: Nfs-server | install {{ keytab }}
  ansible.builtin.shell: |
    set -o pipefail && echo '{{ company_realm_password }}' | kinit admin > /dev/null
    ipa-getkeytab -s {{ hostvars[groups[idm_group][0]].hostname | default(groups[idm_group][0]) }} -p nfs/{{ hostname | default(volume_machine_hostname.stdout) }} -k {{ keytab_path }}
  register: get_keytab
  when: (not keytab_stat.stat.exists) or (validate_keytab.rc > 0)
  changed_when: "'Keytab successfully retrieved and stored in' in get_keytab.stdout"
  no_log: "{{ secure_logs }}"
  become: True

- name: Nfs-server | loop over entries
  ansible.builtin.include_tasks: nfs-vgs.yml
  loop: "{{ lvm_groups }}"
  loop_control:
    loop_var: vgs

#- name: Nfs-server | reload nfs server
#  ansible.builtin.systemd:
#    name: "{{ item }}"
#    state: restarted
#    enabled: true
#  become: True
#  changed_when: False
#  with_items:
#    - "nfs-server"
#    - "nfs-idmapd"

- name: Nfs-server | enable and start firewalld
  ansible.builtin.include_role:
    name: tcharl.ansible_routing
  vars:
    ansible_become: true
    firewalld_zones:
      - name: "{{ datastore_firewall_zone }}"
        enabled_services:
          - service: nfs
          - service: mountd
  tags:
    - standalone
